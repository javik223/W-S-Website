var utils={norm:function(n,t,r){return(n-t)/(r-t)},lerp:function(n,t,r){return(r-t)*n+t},map:function(n,t,r,i,e){return utils.lerp(utils.norm(n,t,r),i,e)},clamp:function(n,t,r){return Math.min(Math.max(n,Math.min(t,r)),Math.max(t,r))},distance:function(n,t){var r=t.x-n.x,i=t.y-n.y;return Math.sqrt(r*r+i*i)},distanceXY:function(n,t,r,i){var e=r-n,a=i-t;return Math.sqrt(e*e+a*a)},circleCollision:function(n,t){return utils.distance(n,t)<=n.radius+t.radius},circlePointCollision:function(n,t,r){return utils.distanceXY(n,t,r.x,r.y)<r.radius},pointInRect:function(n,t,r){return utils.inRange(n,r.x,r.x+r.width)&&utils.inRange(t,r.y,r.y+r.height)},inRange:function(n,t,r){return n>=Math.min(t,r)&&n<=Math.max(t,r)},rangeIntersect:function(n,t,r,i){return Math.max(n,t)>=Math.min(r,i)&&Math.min(n,t)<=Math.max(r,i)},rectIntersect:function(n,t){return utils.rangeIntersect(n.x,n.x+n.width,t.x,t.x+t.width)&&utils.rangeIntersect(n.y,n.y+n.height,t.y,t.y+t.height)},degreesToRads:function(n){return n/180*Math.PI},radsToDegrees:function(n){return 180*n/Math.PI},randomRange:function(n,t){return n+Math.random()*(t-n)},randomInt:function(n,t){return Math.floor(n+Math.random()*(t-n+1))}};